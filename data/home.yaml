hero:
  title: One easy way to configure all your workloads. Everywhere.
  description: Score is a developer-centric and platform-agnostic workload specification. It ensures consistent configuration between local and remote environments. And it's open source.
  secondary_button:
    text: Get started
    link: get-started
why_score:
  title: Why use Score?
  text: Score is loved by developers because they can run the same workload on completely different technology stacks, without needing to be an expert in any one of them.
  sections:
    - from:
        title: Cognitive load
        text: Developers are forced to become experts in a variety of tech and tools, just do deploy a simple change to their apps.
        icon: svg/icon-cognitive.svg
      to:
        title: Features over Ops
        text: Score takes care of configs for developers so they can focus on shipping features instead of fighting with infrastructure.
        icon: svg/icon-checklist.svg
    - from:
        title: Config drift
        text: Multiple config rules, constructs and values across local and remote environments increase the risk of misconfiguration.
        icon: svg/icon-config-drift.svg
      to:
        title: Local to prod
        text: With Score you can easily transition from local to to remote environments. Configs stay consistent, everywhere you deploy.
        icon: svg/icon-multiple_stop.svg
    - from:
        title: YAML bloat
        text: Trying to keep many environment-specific config files in sync leads to repetitive configuration work and YAML bloat.
        icon: svg/icon-yaml-bloat.svg
      to:
        title: One file
        text: Score lets you use one specification file as the single source of truth, easily translatable across your delivery setup.
        icon: svg/icon-task.svg
easily_integrates:
  title: Easily integrates in your existing workflows
  sections:
    - title: Extendable and customizable
      text: The <span class="highlight-code">score.yaml</span> file can be extended and customised according to your needs. The score spec leaves room for environment specific overrides as well as platform specific extensions that allow to list additional properties or requirements.
      image: images/home/6374bfdcaeb3b3355842b6bc_score-overrides-16nov22-p-500.png
    - title: Declarative by nature
      text: Score lets developers define the resources required by their workloads in a declarative way. You declare once that your workload needs to listen on a port to receive requests - and don’t not need to worry where and how the exact port is defined in e.g. a remote Kubernetes environment. By declaring what the workload needs to run, the “how” becomes an environment specific implementation detail that is taken care of by Score.
      image: images/home/635a8680ee487067a410b7e8_declarative-by-nature-score-p-800.png
    - title: Seamless tech stack and workflow integration
      text: Score introduces a single change to your setup by adding a <span class="highlight-code">score.yaml</span> file to your workloads’ repo. Everything else stays as is. Once Score is set up, you can continue using it even if the underlying tech stack changes.
      image: images/home/667d6c310c1a8dc606c3321d_seamless-yaml-score-docker-kubernetes-p-800.png
single_spec:
  title: A single spec to rule them all
  image: images/home/667d6bd96a95417611bc96f5_score-yaml-docker-kubernetes-p-1600.png
how_score_works:
  title: How Score works
  steps:
    - title: "Create a <code class='how-it-works-title-code'>score.yaml</code> file for your workload"
      code:
        type: single
        content: |
          ```
          apiVersion: score.dev/v1b1

          metadata:
            name: service-a

          service:
            ports:
              www:
                port: 8000
                targetPort: 80

          containers:
            container-id:
              image: busybox
              variables:
                CONNECTION_STRING: postgresql://${resources.db.username}:${resources.db.password}@${resources.db.host}:${resources.db.port}

          resources:
            db:
              type: postgres
          ```
    - title: Install a Score Implementation
      code:
        type: tabs
        tabs:
          - title: score-compose
            type: code
            content: |
              ```
              brew install score-spec/tap/score-compose
              ```
          - title: score-k8s
            type: code
            content: |
              ```
              brew install score-spec/tap/score-k8s
              ```
          - title: score-?
            type: text
            content: The Score Specification has the potential to integrate with many container orchestration platforms and tooling such as Kustomize, Amazon ECS, Google Cloud Run, or Nomad. Help us shape the next generation of Score implementation CLI's and start contributing [here](https://github.com/score-spec/spec#-contributing).
    - title: Initialize directory & generate
      code:
        type: tabs
        tabs:
          - title: score-compose
            type: code
            content: |
              ```
              score-compose init
              score-compose generate score.yaml
              ```
          - title: score-k8s
            type: code
            content: |
              ```
              score-k8s init
              score-k8s generate score.yaml
              ```
          - title: score-?
            type: text
            content: The Score Specification has the potential to integrate with many container orchestration platforms and tooling such as Kustomize, Amazon ECS, Google Cloud Run, or Nomad. Help us shape the next generation of Score implementation CLI's and start contributing [here](https://github.com/score-spec/spec#-contributing).
    - title: Run your workload
      code:
        type: tabs
        tabs:
          - title: score-compose
            type: code
            content: |
              ```
              docker-compose up -d
              ```
          - title: score-k8s
            type: code
            content: |
              ```
              kubectl apply -f manifests.yaml
              ```
          - title: score-?
            type: text
            content: The Score Specification has the potential to integrate with many container orchestration platforms and tooling such as Kustomize, Amazon ECS, Google Cloud Run, or Nomad. Help us shape the next generation of Score implementation CLI's and start contributing [here](https://github.com/score-spec/spec#-contributing).
